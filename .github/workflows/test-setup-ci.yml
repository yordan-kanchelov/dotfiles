name: Test Dotfiles Setup

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test-setup-macos:
    name: Test Setup Script on macOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "HOMEBREW_NO_ANALYTICS=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: Run bootstrap script
        run: |
          chmod +x bootstrap.sh
          ./bootstrap.sh
    
      - name: Install dependencies
        run: |
          export PATH="$HOME/.fnm:$PATH"
          eval "$(fnm env)"
          npm install
    
      - name: Run tests
        run: |
          export PATH="$HOME/.fnm:$PATH"
          eval "$(fnm env)"
          npm test

      - name: Run setup script
        run: |
          export PATH="$HOME/.fnm:$PATH"
          eval "$(fnm env)"
          npm run ci:setup

      - name: Verify symlinks were created
        run: |
          echo "Verifying symlinks..."

          # Check if config directories exist
          config_dirs=(".config/ghostty" ".config/starship.toml" ".config/atuin" ".config/nvim")
          for config in "${config_dirs[@]}"; do
            if [ -L "$HOME/$config" ] || [ -e "$HOME/$config" ]; then
              echo "✅ $config exists"
              ls -la "$HOME/$config"
            else
              echo "❌ $config missing"
              exit 1
            fi
          done

          # Check if dotfiles exist
          dotfiles=(".zshrc" ".tmux.conf")
          for dotfile in "${dotfiles[@]}"; do
            if [ -L "$HOME/$dotfile" ] || [ -e "$HOME/$dotfile" ]; then
              echo "✅ $dotfile exists"
              ls -la "$HOME/$dotfile"
            else
              echo "❌ $dotfile missing"
              exit 1
            fi
          done

      - name: Test tmux configuration
        run: |
          if command -v tmux &> /dev/null; then
            echo "Testing tmux configuration..."
            tmux -f ~/.tmux.conf list-keys | head -5 || echo "Tmux config test completed"
          else
            echo "Tmux not installed, skipping config test"
          fi

      - name: Test zsh configuration (basic syntax)
        run: |
          if command -v zsh &> /dev/null && [ -f "$HOME/.zshrc" ]; then
            echo "Testing zsh configuration syntax..."
            zsh -n ~/.zshrc && echo "✅ .zshrc syntax is valid" || echo "⚠️ .zshrc syntax issues found"
          else
            echo "Zsh not available or .zshrc missing"
          fi

      - name: Test Neovim configuration
        run: |
          if command -v nvim &> /dev/null && [ -L "$HOME/.config/nvim" ]; then
            echo "Testing Neovim configuration..."
            # Check if symlink points to dotfiles
            link_target=$(readlink "$HOME/.config/nvim")
            echo "Symlink target: $link_target"
            
            # Verify init.lua exists
            if [ -f "$HOME/.config/nvim/init.lua" ]; then
              echo "✅ init.lua found"
            else
              echo "❌ init.lua missing"
              exit 1
            fi
            
            # Test basic nvim syntax check
            nvim --headless -c "quit" && echo "✅ Neovim can start with config" || echo "⚠️ Neovim config issues"
          else
            echo "Neovim not installed or config not linked"
          fi

      - name: Display installed packages
        run: |
          echo "Installed Homebrew packages:"
          brew list || echo "Could not list brew packages"

  test-setup-ubuntu:
    name: Test Setup Script on Ubuntu (Limited)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run bootstrap script
        run: |
          chmod +x bootstrap.sh
          ./bootstrap.sh
    
      - name: Install dependencies
        run: |
          # Set up fnm environment - try multiple paths
          if [ -d "$HOME/.local/share/fnm" ]; then
            export PATH="$HOME/.local/share/fnm:$PATH"
          elif [ -d "$HOME/.fnm" ]; then
            export PATH="$HOME/.fnm:$PATH"
          fi
          
          # Find fnm executable
          FNM_PATH=$(which fnm || find $HOME -name fnm -type f -executable 2>/dev/null | head -1 || echo "")
          if [ -n "$FNM_PATH" ]; then
            export PATH="$(dirname $FNM_PATH):$PATH"
          fi
          
          eval "$(fnm env)"
          fnm use 22.11.0
          node --version
          npm --version
          npm install
    
      - name: Run tests
        run: |
          # Set up fnm environment - try multiple paths
          if [ -d "$HOME/.local/share/fnm" ]; then
            export PATH="$HOME/.local/share/fnm:$PATH"
          elif [ -d "$HOME/.fnm" ]; then
            export PATH="$HOME/.fnm:$PATH"
          fi
          
          # Find fnm executable
          FNM_PATH=$(which fnm || find $HOME -name fnm -type f -executable 2>/dev/null | head -1 || echo "")
          if [ -n "$FNM_PATH" ]; then
            export PATH="$(dirname $FNM_PATH):$PATH"
          fi
          
          eval "$(fnm env)"
          fnm use 22.11.0
          node --version
          npm test

      - name: Test non-macOS behavior
        run: |
          # Set up fnm environment - try multiple paths
          if [ -d "$HOME/.local/share/fnm" ]; then
            export PATH="$HOME/.local/share/fnm:$PATH"
          elif [ -d "$HOME/.fnm" ]; then
            export PATH="$HOME/.fnm:$PATH"
          fi
          
          # Find fnm executable
          FNM_PATH=$(which fnm || find $HOME -name fnm -type f -executable 2>/dev/null | head -1 || echo "")
          if [ -n "$FNM_PATH" ]; then
            export PATH="$(dirname $FNM_PATH):$PATH"
          fi
          
          eval "$(fnm env)"
          fnm use 22.11.0
          echo "Testing setup script behavior on non-macOS system..."
          npm run setup:no-packages || echo "Setup completed as expected on Linux"

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run ShellCheck on bootstrap script
        uses: ludeeus/action-shellcheck@master
        with:
          check_together: "yes"
          severity: error
          scandir: "."
          ignore_paths: "zsh node_modules" # Skip zsh scripts and node_modules

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
    
      - name: Install dependencies
        run: npm install
    
      - name: Run TypeScript check
        run: npm run typecheck

      - name: Check for common issues
        run: |
          echo "Checking for potential issues..."

          # Check if required files exist
          required_files=("setup.ts" "bootstrap.sh" "brew_packages.txt" ".config/starship.toml" "tmux/.tmux.conf" "zsh/.zshrc" ".config/nvim/init.lua")
          for file in "${required_files[@]}"; do
            if [ -e "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

          # Check brew_packages.txt format
          echo "Checking brew_packages.txt format..."
          if [ -f "brew_packages.txt" ]; then
            while IFS= read -r package; do
              if [[ -n "$package" && ! "$package" =~ ^[[:space:]]*# && ! "$package" =~ ^[a-zA-Z0-9@/_-]+$ ]]; then
                echo "⚠️ Potentially invalid package name: $package"
              fi
            done < "brew_packages.txt"
          fi