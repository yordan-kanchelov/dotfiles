name: Test Setup Script

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Define the test scenarios
env:
  SCENARIOS: |
    [
      { "name": "fresh-install", "os": ["ubuntu-latest", "macos-latest"] },
      { "name": "force-overwrite", "os": ["ubuntu-latest"] },
      { "name": "append-mode", "os": ["ubuntu-latest", "macos-latest"] },
      { "name": "interactive-mode", "os": ["ubuntu-latest"] }
    ]

jobs:
  test-setup:
    name: Test ${{ matrix.scenario.name }} (${{ matrix.scenario.os }})
    runs-on: ${{ matrix.scenario.os }}
    strategy:
      matrix:
        include:
          - scenario: { name: 'fresh-install', os: ubuntu-latest }
          - scenario: { name: 'fresh-install', os: macos-latest }
          - scenario: { name: 'force-overwrite', os: ubuntu-latest }
          - scenario: { name: 'append-mode', os: ubuntu-latest }
          - scenario: { name: 'append-mode', os: macos-latest }
          - scenario: { name: 'interactive-mode', os: ubuntu-latest }
      fail-fast: false
      max-parallel: 4

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up shell
      shell: bash
      run: |
        # Create a test home directory
        export TEST_HOME="${{ github.workspace }}/test_home_${{ matrix.scenario.name }}"
        mkdir -p "$TEST_HOME"
        echo "TEST_HOME=$TEST_HOME" >> $GITHUB_ENV
        
        # For testing different scenarios, create some dummy files
        if [[ "${{ matrix.scenario.name }}" != "fresh-install" ]]; then
          mkdir -p "$TEST_HOME/.config"
          touch "$TEST_HOME/.zshrc"
          touch "$TEST_HOME/.tmux.conf"
          mkdir -p "$TEST_HOME/.config/ghostty"
          touch "$TEST_HOME/.config/ghostty/config"
          echo "# Existing starship config" > "$TEST_HOME/.config/starship.toml"
        fi
        
        # For interactive tests, we need to set up expect
        if [[ "${{ matrix.scenario.name }}" == "interactive-mode" ]]; then
          if [[ "${{ runner.os }}" == "Linux" ]] || [[ "${{ runner.os }}" == "macOS" ]]; then
            sudo apt-get update
            sudo apt-get install -y expect
          fi
        fi

    - name: Run test scenario - ${{ matrix.scenario.name }}
      shell: bash
      env:
        HOME: ${{ github.workspace }}/test_home_${{ matrix.scenario.name }}
      run: |
        set -e
        cd "$GITHUB_WORKSPACE"
        
        # Make the script executable
        chmod +x setup.sh
        
        case "${{ matrix.scenario.name }}" in
          "fresh-install")
            echo "Running fresh install test..."
            ./setup.sh --non-interactive --force-overwrite
            ;;
            
          "force-overwrite")
            echo "Testing force overwrite mode..."
            ./setup.sh --non-interactive --force-overwrite
            # Verify files were overwritten
            if [ ! -L "$TEST_HOME/.zshrc" ] || [ ! -L "$TEST_HOME/.tmux.conf" ]; then
              echo "Files were not properly overwritten"
              exit 1
            fi
            ;;
            
          "append-mode")
            echo "Testing append mode..."
            ./setup.sh --non-interactive --append
            # Verify files were appended to, not overwritten
            if [ ! -f "$TEST_HOME/.zshrc" ] || [ ! -f "$TEST_HOME/.tmux.conf" ]; then
              echo "Files were not properly handled in append mode"
              exit 1
            fi
            if ! grep -q "Appended by dotfiles setup" "$TEST_HOME/.zshrc"; then
              echo "Content was not properly appended to .zshrc"
              exit 1
            fi
            ;;
            
          "interactive-mode")
            echo "Testing interactive mode..."
            # Use expect to handle interactive prompts
            expect << 'EOF'
              set timeout 300
              spawn ./setup.sh
              expect {
                "Overwrite" { send "y\r"; exp_continue }
                "What would you like to do" { send "1\r"; exp_continue }
                eof
              }
              catch wait result
              exit [lindex $result 3]
            EOF
            ;;
        esac || (echo "Test scenario '$SCENARIO' failed" && exit 1)

        # Verify symlinks were created and point to the correct files
        echo "Verifying symlinks and their targets..."
        
        # Function to verify symlink and its content
        verify_symlink() {
            local symlink="$1"
            local expected_target="$2"
            
            if [ ! -L "$symlink" ]; then
                echo "❌ Symlink not created: $symlink"
                exit 1
            fi
            
            local actual_target=$(readlink -f "$symlink")
            if [ "$actual_target" != "$expected_target" ]; then
                echo "❌ Symlink target mismatch for $symlink"
                echo "   Expected: $expected_target"
                echo "   Found:    $actual_target"
                exit 1
            fi
            echo "✅ Verified symlink: $symlink -> $expected_target"
        }
        
        # Verify each symlink
        verify_symlink "$TEST_HOME/.zshrc" "$GITHUB_WORKSPACE/zsh/.zshrc"
        verify_symlink "$TEST_HOME/.tmux.conf" "$GITHUB_WORKSPACE/tmux/.tmux.conf"
        verify_symlink "$TEST_HOME/.config/ghostty" "$GITHUB_WORKSPACE/.config/ghostty"
        verify_symlink "$TEST_HOME/.config/starship.toml" "$GITHUB_WORKSPACE/.config/starship.toml"

        # Verify TPM was installed
        echo "Verifying TPM installation..."
        if [ ! -d "$TEST_HOME/.tmux/plugins/tpm" ]; then
            echo "❌ TPM not installed"
            exit 1
        fi
        echo "✅ Verified TPM installation"

        # Verify file contents for critical configs
        verify_file_content() {
            local file="$1"
            local expected_content="$2"
            
            if [ ! -f "$file" ]; then
                echo "❌ Config file not found: $file"
                exit 1
            fi
            
            if ! grep -q "$expected_content" "$file"; then
                echo "❌ Config file content verification failed for $file"
                echo "   Expected content to contain: $expected_content"
                exit 1
            fi
            echo "✅ Verified config file: $file"
        }
        
        # Add content verification for critical configs
        if [ -f "$GITHUB_WORKSPACE/tmux/.tmux.conf" ]; then
            verify_file_content "$GITHUB_WORKSPACE/tmux/.tmux.conf" "set -g @plugin"
        fi
        
        if [ -f "$GITHUB_WORKSPACE/zsh/.zshrc" ]; then
            verify_file_content "$GITHUB_WORKSPACE/zsh/.zshrc" "plugins=("
        fi

        echo "✅ All tests passed!"

    - name: Cleanup (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Clean up Homebrew to prevent caching issues
        if [ -f "/usr/local/bin/brew" ] || [ -f "/opt/homebrew/bin/brew" ]; then
          brew cleanup
        fi

    - name: Cleanup test directory
      if: always()
      run: |
        # Clean up test directory
        if [ -d "${{ github.workspace }}/test_home_${{ matrix.scenario.name }}" ]; then
          rm -rf "${{ github.workspace }}/test_home_${{ matrix.scenario.name }}"
        fi
